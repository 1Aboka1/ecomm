package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
    "context"
    "ecomm-backend/graph/model"
    "ecomm-backend/internal/database"
    "log"
)

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.CategoryInput) (*model.Category, error) {
    db := database.OrmDb
    category := &database.Category{Name: input.Name, Description: input.Description}

    result := db.Create(&category)
    if result.Error != nil {
        return nil, result.Error
    }
    categoryGQL := dbToGQLModel(category)
    return categoryGQL, nil
}

// RemoveCategory is the resolver for the removeCategory field.
func (r *mutationResolver) RemoveCategory(ctx context.Context, input model.DeleteCategoryInput) (*model.Category, error) {
    db := database.OrmDb
    var category database.Category
    result := db.Where("id = ?", input.ID).Take(&category)
    if result.Error != nil {
        return nil, result.Error
    }

    result = db.Where("id = ?", input.ID).Delete(database.Category{})
    if result.Error != nil {
        return nil, result.Error
    }

    categoryGQL := dbToGQLModel(&category)
    return categoryGQL, nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
    db := database.OrmDb
    var categories []database.Category

    result := db.Select("id", "name", "created_at").Find(&categories)
    if result.Error != nil {
        return nil, result.Error
    }

    var categoriesGQL []*model.Category
    for _, category := range categories {
        categoriesGQL = append(categoriesGQL, dbToGQLModel(&category))
    }
    return categoriesGQL, nil
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, id string) (*model.Category, error) {
    db := database.OrmDb
    var category database.Category
    log.Println(db)
    result := db.Where("id = ?", id).Take(&category)
    if result.Error != nil {
        return nil, result.Error
    }

    categoryGQL := dbToGQLModel(&category)
    return categoryGQL, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
